Assignment Report - Assignment Social and Large-Scale Networks
Student Name: Twan Tran
Student ID: @029136612
Course: CECS 427

Approach:
The provided code implements various functionalities for working with graphs using the NetworkX library in Python. Here's a summary of each function's purpose:

create_karate_graph(G): Creates an Karate-Club graph according to this link: https://networkx.org/documentation/stable/auto_examples/graph/plot_karate_club.html

partition_graph(G, num_components): Partitioning the graph G so that the number of connected components is 
equal to num_components


plot_graph(G, shortest=None):
> Added submenu and notifications allow user to see, which functions is enabled/disabled.
> Added Cluster Coefficients to this function, calculate the scaling of nodes' size, and colors according to the requirements.
> Added Neighborhood Overlaps to this fucntion using the same previously instructions to highlight edges.

assign_homophily_attributes(G, p, karate): Assigns colors to nodes in G based on probability p. Calculate the Assortativity to determine whether the returning value is similar to p.

assign_balanced_graph_attributes(G, p, karate): Assigns signs to edges in G based probability. It uses the dwave_networkx (structural_imbalance) library to analyze the graphs for balance.

Additional Features Implemented:
> Used try-except blocks to handle exceptions gracefully and provide meaningful error messages.
> Implemented a menu-based user interface (main function) to interactively perform graph operations.
> Used global variables shortest and graph to store the current shortest path and graph, respectively, to maintain state across menu options.
> Enhanced the plot_graph function to highlight the shortest path on the graph if provided.

Overall, the code is now robust and user-friendly, providing a solid foundation for further enhancements and applications in graph manipulation.